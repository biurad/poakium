<?php

declare(strict_types=1);

/*
 * This code is under BSD 3-Clause "New" or "Revised" License.
 *
 * PHP version 7 and above required
 *
 * @category  LoaderManager
 *
 * @author    Divine Niiquaye Ibok <divineibok@gmail.com>
 * @copyright 2019 Biurad Group (https://biurad.com/)
 * @license   https://opensource.org/licenses/BSD-3-Clause License
 *
 * @link      https://www.biurad.com/projects/biurad-loader
 * @since     Version 0.1
 */

namespace BiuradPHP\Loader\Adapters;

use Nette;
use RuntimeException;

use function is_array;
use function is_object;

/**
 * Reading and generating PHP files.
 *
 * @author Divine Niiquaye Ibok <divineibok@gmail.com>
 * @license BSD-3-Clause
 */
final class PhpAdapter extends Adapter
{
    /**
     * Reads configuration from PHP file.
     *
     * @param  string $filename
     *
     * @return array
     *
     * @throws RuntimeException
     */
    public function fromFile(string $filename)
    {
        if (!is_file($filename) || !is_readable($filename)) {
            throw new RuntimeException(
                sprintf(
                    "File '%s' doesn't exist or not readable",
                    $filename
                )
            );
        }

        set_error_handler(
            function ($error, $message = '') use ($filename) {
                throw new RuntimeException(
                    sprintf('Error reading PHP file "%s": %s', $filename, $message),
                    $error
                );
            },
            E_WARNING
        );
        $php = require $filename;
        restore_error_handler();

        return (array) $php;
    }

    /**
     * Reads configuration from PHP data.
     *
     * @param string $string
     *
     * @return void
     *
     */
    public function fromString($string)
    {
        throw new RuntimeException(
            sprintf('Error reading PHP %s, this is not supported', gettype($string))
        );
    }

    protected function processFrom(string $config)
    {
        //TODO this method will be implemented if php arrays are updated to support this method.
    }


    /**
     * Generates configuration in PHP format.
     *
     * @param array $data
     * @return string
     */
    protected function ProcessDump(array $data)
    {
        $class = __CLASS__;

        if (class_exists(Nette\PhpGenerator\Helpers::class)) {
            $dump = Nette\PhpGenerator\Helpers::dump($data);
        } else {
            $dump =  $this->encodeArray($data);
        }
        return "<?php // generated by $class \n\nreturn " . $dump . ';';
    }

    /**
     * Method to get an array as an exported string.
     *
     * @param array $var   the array to get as a string
     * @param int   $level used internally to indent rows
     *
     * @return string
     */
    private function encodeArray(array $var, $level = 0)
    {
        $read = [];
        foreach ($var as $key => $value) {
            if (is_array($value) || is_object($value)) {
                $read[] = var_export($key, true) . ' => ' . $this->encodeArray((array) $value, $level + 1);
            } else {
                $read[] = var_export($key, true) . ' => ' . var_export($value, true);
            }
        }

        $space = str_repeat('    ', $level);

        return "[\n    {$space}" . implode(",\n    {$space}", $read) . "\n{$space}]";
    }
}
